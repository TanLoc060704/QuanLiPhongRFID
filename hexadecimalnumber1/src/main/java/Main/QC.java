/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Main;

import java.awt.Component;
import java.awt.Dimension;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;

/**
 *
 * @author rfid
 */
public class QC extends javax.swing.JFrame {

    private File fileImport ;
    private Map<String, String[]> fileDataImport = new HashMap<>();
    private String keyCheck, header;

    /**
     * Creates new form QC
     */
    public QC() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txt_epc = new javax.swing.JTextField();
        btn_check = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        txt_man_hinh = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jLabel1.setText("EPC");

        txt_epc.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txt_epc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_epcActionPerformed(evt);
            }
        });

        btn_check.setBackground(new java.awt.Color(102, 255, 204));
        btn_check.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btn_check.setText("CHECK");
        btn_check.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_checkActionPerformed(evt);
            }
        });

        jButton2.setText("Import Folder");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        txt_man_hinh.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(txt_man_hinh, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 70, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_epc, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_check)))
                .addGap(14, 14, 14))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txt_epc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_check))
                .addGap(30, 30, 30)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_man_hinh, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooserImport = new JFileChooser();
        fileChooserImport.setDialogTitle("Import an Excel file");
        fileChooserImport.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooserImport.setPreferredSize(new Dimension(800, 600));
        int returnValue = fileChooserImport.showOpenDialog(this);

        if (returnValue == JFileChooser.APPROVE_OPTION) {
            fileImport = fileChooserImport.getSelectedFile();

            if (fileImport != null && (fileImport.getName().toLowerCase().endsWith(".xls") || fileImport.getName().toLowerCase().endsWith(".xlsx"))) {
                fileDataImport = readFileExcel(fileImport); // Đọc và gán dữ liệu từ file Excel

                if (fileDataImport != null) {
                    // Hiển thị tổng số dòng dữ liệu đã import
                    JOptionPane.showMessageDialog(this, "Đã import tổng cộng " + fileDataImport.size() + " dòng dữ liệu.");
                    displayAllData();

                }
            } else {
                JOptionPane.showMessageDialog(this, "Vui lòng chọn một file Excel hợp lệ.");
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void txt_epcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_epcActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_epcActionPerformed

    private void btn_checkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_checkActionPerformed
        // TODO add your handling code here:\
        String inputEPC = txt_epc.getText().trim();
        if (!inputEPC.isEmpty()) {
            if (fileDataImport.containsKey(inputEPC)) {
                String[] rowData = fileDataImport.get(inputEPC);
                StringBuilder displayRow = new StringBuilder();

                displayRow.append("<html><body><h1>Đã tìm thấy EPC</h1> </br> <h3>Thông tin EPC:</h3>");

               
                
                // Bắt đầu bảng HTML
                displayRow.append("<table border='1' cellspacing='0' cellpadding='5'>");

                // Dòng tiêu đề
                displayRow.append("<tr>");
                for (int i = 0; i < headerTitles.length; i++) {
                    // Bỏ qua tiêu đề cuối cùng
                    if (i != headerTitles.length - 1) {
                        displayRow.append("<th>").append(headerTitles[i]).append("</th>"); // Sử dụng thẻ <th> cho tiêu đề
                    }
                }
                displayRow.append("</tr>");

                // Dòng dữ liệu
                displayRow.append("<tr>");
                for (int i = 0; i < rowData.length; i++) {
                    // Không bỏ qua dữ liệu cuối cùng
                    displayRow.append("<td>").append(rowData[i]).append("</td>"); // Sử dụng thẻ <td> cho dữ liệu
                }
                displayRow.append("</tr>");

                // Kết thúc bảng HTML
                displayRow.append("</table>");

                if (keyCheck != null) {
                    String[] parts = keyCheck.split(";");
                    displayRow.append("<h4>Thông tin đơn hàng:</h4><ul>");
                    for (String part : parts) {
                        displayRow.append("<li>").append(part.trim()).append("</li>");
                    }
                    displayRow.append("</ul>");
                }

                displayRow.append("</body></html>");

                showCustomMessageDialog(this, displayRow.toString(), "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            } else {
                showCustomMessageDialog(this, "<html><body><h3>EPC không tìm thấy trong dữ liệu.</h3></body></html>", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            showCustomMessageDialog(this, "<html><body><h3>Vui lòng nhập EPC.</h3></body></html>", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_btn_checkActionPerformed
    
    public static void showCustomMessageDialog(Component parentComponent, String message, String title, int messageType) {
        JOptionPane optionPane = new JOptionPane(message, messageType, JOptionPane.DEFAULT_OPTION);
        JDialog dialog = optionPane.createDialog(parentComponent, title);
        dialog.setTitle("Thông tin xác thực EPC");
        dialog.setSize(new Dimension(1000, 700)); // Điều chỉnh kích thước theo nhu cầu
        dialog.setLocationRelativeTo(parentComponent); 
        dialog.setVisible(true);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QC().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_check;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField txt_epc;
    private javax.swing.JLabel txt_man_hinh;
    // End of variables declaration//GEN-END:variables
    private String[] headerTitles;
    
    public Map<String, String[]> readFileExcel(File file) {
        Map<String, String[]> dataMap = new HashMap<>();
        List<String> headers = new ArrayList<>();
        String epcKey = null;

        try (FileInputStream fis = new FileInputStream(file)) {
            Workbook workbook = WorkbookFactory.create(fis);
            Sheet sheet = workbook.getSheetAt(0); // Get the first sheet

            Row headerRow = sheet.getRow(0);
            if (headerRow != null) {
                int lastCellNum = headerRow.getLastCellNum();
                headerTitles = new String[lastCellNum]; // Khởi tạo mảng lưu tiêu đề
              
                for (int i = 0; i < lastCellNum; i++) {
                    Cell cell = headerRow.getCell(i, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                    String cellValue = cell.getStringCellValue();
                    headers.add(cellValue);
                    headerTitles[i] = cellValue; // Lưu tiêu đề vào mảng
                }
                
                // Lấy giá trị của ô cuối cùng trong dòng đầu tiên
                Cell lastCell = headerRow.getCell(headerRow.getLastCellNum() - 1); // Sửa ở đây
                if (lastCell != null) {
                    keyCheck = lastCell.getStringCellValue();
                    System.out.println("Key Check: " + keyCheck);
                }
            }

            for (Row row : sheet) {
                
//                if (row.getRowNum() == 0) continue; // Skip header row

                List<String> rowData = new ArrayList<>();
                epcKey = null;

                for (int i = 0; i < row.getLastCellNum(); i++) {
                    Cell cell = row.getCell(i, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                    String cellValue = "";
                    switch (cell.getCellType()) {
                        case STRING:
                            cellValue = cell.getStringCellValue();
                            break;
                        case NUMERIC:
                            cellValue = String.valueOf(cell.getNumericCellValue());
                            break;
                        case BOOLEAN:
                            cellValue = String.valueOf(cell.getBooleanCellValue());
                            break;
                        case FORMULA:
                            cellValue = cell.getCellFormula();
                            break;
                        default:
                            cellValue = "";
                    }

                    if (i == 1) { // Column index for EPC
                        epcKey = cellValue; 
                    }rowData.add(cellValue);
                }

                if (epcKey != null && !epcKey.isEmpty()) {
                    dataMap.put(epcKey, rowData.toArray(new String[0]));
                }
            }
            workbook.close();
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Lỗi khi đọc file Excel: " + e.getMessage());
        }

        return dataMap;
    }

    private void displayAllData() {
        StringBuilder allData = new StringBuilder();
        String pathFile = fileImport.getName();

        // Tạo phần tử HTML để hiển thị đường dẫn file
        allData.append("<html><body>");
        allData.append("<h3>File: ").append(pathFile).append("</h3>");

        // Tạo bảng HTML với tiêu đề
        allData.append("<table border='1' cellspacing='0' cellpadding='5'>");
        allData.append("<tr>");
        for (int i = 0 ; i <= headerTitles.length; i++) {
            if(i == headerTitles.length-1){
                String[] chuoiHeader = headerTitles[i].split(";");
                for (String value : chuoiHeader) {
                    allData.append("<td>").append(value).append("</td>");
                }
//                allData.append("<th>").append(headerTitles[i]).append("</th>");
            }
        }
        allData.append("</tr>");
        allData.append("</table>");
        allData.append("</body></html>");

        // Cập nhật nội dung HTML vào txa_man_hinh
        txt_man_hinh.setText(allData.toString());
    }

    private String getCellValue(Cell cell) {
        String cellValue = "";
        switch (cell.getCellType()) {
            case STRING:
                cellValue = cell.getStringCellValue();
                break;
            case NUMERIC:
                cellValue = String.valueOf(cell.getNumericCellValue());
                break;
            case BOOLEAN:
                cellValue = String.valueOf(cell.getBooleanCellValue());
                break;
            case FORMULA:
                cellValue = cell.getCellFormula();
                break;
            default:
                cellValue = "";
        }
        return cellValue;
    }
}
